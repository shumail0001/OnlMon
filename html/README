This is a description of the new online monitoring html output scheme.

As before, the html output stuff is a 2 steps process :

1) The OnlMonDraw children, by their MakeHtml method, produces some html and/or gif files for a given run.

2) A web server uses the mon.cgi script, located in this directory, to browse the html outputs. The main advantage of this script above the old scheme is that it will output a navigation menu on the left part of the browser window.

The "communication" between 1) and 2) is possible thanks to a certain directory structure and one file per run, named "menu" (and possibly "menu.html" for browser w/o JavaScript). The top directory is specified through the environment variable ONLMON_HTMLDIR (note that ONLMON_HTMLSUBDIR is no longer used).

 runtype
   |
   +--run_XXXXXXXXXX_YYYYYYYYYY
              |
              +---AAAAA
              |     |
              |     +--menu
              |     +--menu.html
              |     +--every other html or gif files for run AAAAA.
              |
              +---BBBBB

 where runtype=eventdata or calibdata or junkdata or unknowndata

 XXXXXXXXX and YYY... are 10 digits (padded with 0 in the front) run numbers.

 Both the menu and menu.html (which is only used if JavaScript is not 
 available on a browser) are generated by the online monitoring stuff
 (see OnlMonDraw::MakeHTML and OnlMonClient::htmlXXX methods)

 The "menu" file has the following structure :

 SUBSYSTEM/SUBDIR/SUBSUBDIR/TITLE/link

 Any level of subdir is possible (but should be reasonably low to
 fit on screen ;-) ).
 As an example, the following "menu" file :

 DAQMON/Monitor/DAQMON_92444.gif
 DAQMON/PacketSummary/DAQMON_PacketSummary_92444.html
 DAQMON/Status/BBC/DAQMON_BBC_92444.gif
 DAQMON/Status/DCHEAST/DAQMON_DCHEAST_92444.gif
 DAQMON/Status/DCHWEST/DAQMON_DCHWEST_92444.gif
 
 will produce on screen a tree menu as : 

 DAQMON
   |
   +--Monitor
   +--PacketSummary
   +--Status
        |
        +--BBC
        +--DCHEAST
        +--DCHWEST

 and a click on e.g. DAQMON/Monitor will show DAQMON_92444.gif file on the
 right part of the browser window.

This "menu" file is created by the OnlMonDraw::MakeHtml methods, in the following way (see subsystems/Example/MyMonDraw.C).

Assume the MyMonDraw class (deriving from OnlMonDraw) has 2 canvases, TC[0] and TC[1]. Each one will be output as a gif file. Also, some expert html pages, log and status will be produced. One would like to have the following navigation menu for those (*) 

  MYMON
    |
    +--First Canvas
    +--Second Canvas
    +--For EXPERTS
         |
         +--Log
         +--Status

   The way to do it is to use the OnlMonClient::htmlRegisterPage method.

int MyMonDraw::MakeHtml(const char *what)
{
  int iret = Draw(what);
  if (iret) // on error no html output please
    {
      return iret;
    }

  OnlMonClient *cl = OnlMonClient::instance();

  string giffile = cl->htmlRegisterPage(*this,"First Canvas","1","gif");
  // This will append the line
  // MYMON/First Canvas/MYMON_1_#####.gif (where ##### is the run number)
  // to the menu file in the directory for the current run,
  // AND will return the full path (in giffile) to the gif file. 
  // The creation of the gif file itself is left to you :
  TC[0]->Print(giffile.c_str());

  // idem for TC[1] ...
  
  // Same story for experts html pages for instance :
  string logfile = cl->htmlRegisterPage(*this,"For EXPERTS/Log","log","html");
  // Will append to menu file :
  // MYMON/For EXPERTS/Log/MYMON_log_#####.html
  // and then you have to create the html file itself:
  ofstream out(logfile.c_str());
  out << "<HTML>bla bla</HTML>" << endl;
  out.close();

  // idem for status html page...
}

At the end of this method execution for e.g. run 92252, the menu file will (at least) contain the lines : 

MYMON/First Canvas/MYMON_1_92252.gif
MYMON/For EXPERTS/Log/MYMON_log_92252.html
MYMON/For EXPERTS/Status/MYMON_status_92252.html
MYMON/Second Canvas/MYMON_2_92252.gif

which will be used by the mon.cgi script to produced the desired menu above (*)

Note that you may want to get the full path to a file that you don't want to register to the menu. Then you'll simply have to use the OnlMonClient::htmlNamer method.

Enjoy !

L. Aphecetche
November 2003
aphecetc@in2p3.fr
